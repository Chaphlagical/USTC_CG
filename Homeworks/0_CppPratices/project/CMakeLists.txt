# 设置 CMake 的最低版本要求
cmake_minimum_required(VERSION 3.10 FATAL_ERROR)

# 设定项目
project (CppPratices VERSION 1.0)

# 修改默认的安装路径前缀
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR} CACHE PATH "install prefix" FORCE)
endif()

# 在 Debug 模式下自动对 dll 和 lib 文件名后边加 d，但 exe 仍然需要手动设置
set(CMAKE_DEBUG_POSTFIX d)

# 确定 C++ 版本
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# 将生成的 exe, dll, lib 等放置在 build 根目录内，而不是 build 内各 target 对应目录内
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")

# 开启 VS 的文件夹功能
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# 添加自定义 CMake 模块 UbpaTool.cmake，内含一些工具函数
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
include(UbpaTool)

# 添加 include 搜索目录，用于 #include <xxx.h>
include_directories (
	${PROJECT_SOURCE_DIR}/include
	# $ENV{XXX_INCLUDE_PATH}
	# ...
)

# 处理文件夹 src 的 CMakeLists.txt
add_subdirectory (src)

# 安装包设置
include(InstallRequiredSystemLibraries)
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_PACKAGE_VERSION_MAJOR "${CppPratices_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${CppPratices_VERSION_MINOR}")
include(CPack)
